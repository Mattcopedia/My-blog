{"version":3,"sources":["pages/Homepage.js","pages/AboutPage.js","pages/article-content.js","components/ArticleList.js","pages/ArticlesListPage.js","components/UpvotesSection.js","components/commentsList.js","pages/NotFoundPage.js","components/AddCommentForm.js","pages/ArticlePage.js","NavBar.js","App.js","serviceWorker.js","index.js"],"names":["HomePage","react_default","a","createElement","Fragment","AboutPage","articles","name","title","content","ArticlesList","_ref","map","article","key","react_router_dom","className","to","concat","substring","ArticlesListPage","ArticleList","articleContent","UpvotesSection","articleName","upvotes","setArticleInfo","upvoteArticle","_ref2","Object","asyncToGenerator","regenerator_default","mark","_callee","result","body","wrap","_context","prev","next","fetch","method","sent","json","stop","apply","this","arguments","id","onClick","CommentsList","comments","comment","username","text","NotFoundPage","AddCommentForm","_useState","useState","_useState2","slicedToArray","setUsername","_useState3","_useState4","commentText","setCommentText","addComment","JSON","stringify","headers","Content-Type","type","value","onChange","event","target","rows","cols","ArticlePage","match","params","find","articleInfo","useEffect","fetchData","pages_NotFoundPage","otherArticles","filter","components_UpvotesSection","paragraph","commentsList","components_AddCommentForm","NavBar","App","src_NavBar","react_router","path","component","exact","Component","Boolean","window","location","hostname","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.33f7c5a9.chunk.js","sourcesContent":["// import React from \"react\";\r\n// // react doesnt allow a component return more than one element at the same level like this so we\r\n// //have to put everything in an extra div or react Fragments but preferably a fragment\r\n\r\nimport React from \"react\";\r\n\r\nconst HomePage = () => (\r\n  <>\r\n    <h1>Hello, welcome to my blog!</h1>\r\n    <p>\r\n      Welcome to my blog! Proin congue ligula id risus posuere, vel eleifend ex\r\n      egestas. Sed in turpis leo. Aliquam malesuada in massa tincidunt egestas.\r\n      Nam consectetur varius turpis, non porta arcu porttitor non. In tincidunt\r\n      vulputate nulla quis egestas. Ut eleifend ut ipsum non fringilla. Praesent\r\n      imperdiet nulla nec est luctus, at sodales purus euismod.\r\n    </p>\r\n    <p>\r\n      Donec vel mauris lectus. Etiam nec lectus urna. Sed sodales ultrices\r\n      dapibus. Nam blandit tristique risus, eget accumsan nisl interdum eu.\r\n      Aenean ac accumsan nisi. Nunc vel pulvinar diam. Nam eleifend egestas\r\n      viverra. Donec finibus lectus sed lorem ultricies, eget ornare leo luctus.\r\n      Morbi vehicula, nulla eu tempor interdum, nibh elit congue tellus, ac\r\n      vulputate urna lorem nec nisi. Morbi id consequat quam. Vivamus accumsan\r\n      dui in facilisis aliquet.,\r\n    </p>\r\n    <p>\r\n      Etiam nec lectus urna. Sed sodales ultrices dapibus. Nam blandit tristique\r\n      risus, eget accumsan nisl interdum eu. Aenean ac accumsan nisi. Nunc vel\r\n      pulvinar diam. Nam eleifend egestas viverra. Donec finibus lectus sed\r\n      lorem ultricies, eget ornare leo luctus. Morbi vehicula, nulla eu tempor\r\n      interdum, nibh elit congue tellus, ac vulputate urna lorem nec nisi. Morbi\r\n      id consequat quam. Vivamus accumsan dui in facilisis aliquet.,\r\n    </p>\r\n  </>\r\n);\r\n\r\nexport default HomePage;\r\n","import React from \"react\";\r\n// react doesnt allow a component return more than one element at the same level like this so we\r\n//have to put everything in an extra div or react Fragments but preferably a fragment\r\n\r\nconst AboutPage = () => (\r\n  <>\r\n    <h1>About Me</h1>\r\n    <p>Welcome to my Blog!</p>\r\n    Lorem Ipsum is simply dummy text of the printing and typesetting industry.\r\n    Lorem Ipsum has been the industry's standard dummy text ever since the\r\n    1500s, when an unknown printer took a galley of type and scrambled it to\r\n    make a type specimen book. It has survived not only five centuries, but also\r\n    the leap into electronic typesetting, remaining essentially unchanged. It\r\n    was popularised in the 1960s with the release of Letraset sheets containing\r\n    Lorem Ipsum passages\r\n    <p>\r\n      It is a long established fact that a reader will be distracted by the\r\n      readable content of a page when looking at its layout. The point of using\r\n      Lorem Ipsum is that it has a more-or-less normal distribution of letters,\r\n      as opposed to using 'Content here, content here', making it look like\r\n      readable English. Many desktop publishing packages and web page editors\r\n      now use Lorem Ipsum as their default model text,\r\n    </p>\r\n  </>\r\n);\r\nexport default AboutPage;\r\n","const articles = [\r\n  {\r\n    name: \"learn-react\",\r\n    title: \"The Fastest Way to Learn React\",\r\n    content: [\r\n      `Welcome! Today we're going to be talking about the fastest way to\r\n            learn React. We'll be discussing some topics such as proin congue\r\n            ligula id risus posuere, vel eleifend ex egestas. Sed in turpis leo. \r\n            Aliquam malesuada in massa tincidunt egestas. Nam consectetur varius turpis, \r\n            non porta arcu porttitor non. In tincidunt vulputate nulla quis egestas. Ut \r\n            eleifend ut ipsum non fringilla. Praesent imperdiet nulla nec est luctus, at \r\n            sodales purus euismod.`,\r\n      `Donec vel mauris lectus. Etiam nec lectus urna. Sed sodales ultrices dapibus. \r\n            Nam blandit tristique risus, eget accumsan nisl interdum eu. Aenean ac accumsan \r\n            nisi. Nunc vel pulvinar diam. Nam eleifend egestas viverra. Donec finibus lectus \r\n            sed lorem ultricies, eget ornare leo luctus. Morbi vehicula, nulla eu tempor \r\n            interdum, nibh elit congue tellus, ac vulputate urna lorem nec nisi. Morbi id \r\n            consequat quam. Vivamus accumsan dui in facilisis aliquet.`,\r\n      `Etiam nec lectus urna. Sed sodales ultrices dapibus. \r\n            Nam blandit tristique risus, eget accumsan nisl interdum eu. Aenean ac accumsan \r\n            nisi. Nunc vel pulvinar diam. Nam eleifend egestas viverra. Donec finibus lectus \r\n            sed lorem ultricies, eget ornare leo luctus. Morbi vehicula, nulla eu tempor \r\n            interdum, nibh elit congue tellus, ac vulputate urna lorem nec nisi. Morbi id \r\n            consequat quam. Vivamus accumsan dui in facilisis aliquet.`,\r\n    ],\r\n  },\r\n  {\r\n    name: \"learn-node\",\r\n    title: \"How to Build a Node Server in 10 Minutes\",\r\n    content: [\r\n      `In this article, we're going to be talking looking at a very quick way\r\n            to set up a Node.js server. We'll be discussing some topics such as proin congue\r\n            ligula id risus posuere, vel eleifend ex egestas. Sed in turpis leo. \r\n            Aliquam malesuada in massa tincidunt egestas. Nam consectetur varius turpis, \r\n            non porta arcu porttitor non. In tincidunt vulputate nulla quis egestas. Ut \r\n            eleifend ut ipsum non fringilla. Praesent imperdiet nulla nec est luctus, at \r\n            sodales purus euismod.`,\r\n      `Donec vel mauris lectus. Etiam nec lectus urna. Sed sodales ultrices dapibus. \r\n            Nam blandit tristique risus, eget accumsan nisl interdum eu. Aenean ac accumsan \r\n            nisi. Nunc vel pulvinar diam. Nam eleifend egestas viverra. Donec finibus lectus \r\n            sed lorem ultricies, eget ornare leo luctus. Morbi vehicula, nulla eu tempor \r\n            interdum, nibh elit congue tellus, ac vulputate urna lorem nec nisi. Morbi id \r\n            consequat quam. Vivamus accumsan dui in facilisis aliquet.`,\r\n      `Etiam nec lectus urna. Sed sodales ultrices dapibus. \r\n            Nam blandit tristique risus, eget accumsan nisl interdum eu. Aenean ac accumsan \r\n            nisi. Nunc vel pulvinar diam. Nam eleifend egestas viverra. Donec finibus lectus \r\n            sed lorem ultricies, eget ornare leo luctus. Morbi vehicula, nulla eu tempor \r\n            interdum, nibh elit congue tellus, ac vulputate urna lorem nec nisi. Morbi id \r\n            consequat quam. Vivamus accumsan dui in facilisis aliquet.`,\r\n    ],\r\n  },\r\n  {\r\n    name: \"my-thoughts-on-resumes\",\r\n    title: \"My Thoughts on Resumes\",\r\n    content: [\r\n      `Today is the day I talk about something which scares most people: resumes.\r\n            In reality, I'm not sure why people have such a hard time with proin congue\r\n            ligula id risus posuere, vel eleifend ex egestas. Sed in turpis leo. \r\n            Aliquam malesuada in massa tincidunt egestas. Nam consectetur varius turpis, \r\n            non porta arcu porttitor non. In tincidunt vulputate nulla quis egestas. Ut \r\n            eleifend ut ipsum non fringilla. Praesent imperdiet nulla nec est luctus, at \r\n            sodales purus euismod.`,\r\n      `Donec vel mauris lectus. Etiam nec lectus urna. Sed sodales ultrices dapibus. \r\n            Nam blandit tristique risus, eget accumsan nisl interdum eu. Aenean ac accumsan \r\n            nisi. Nunc vel pulvinar diam. Nam eleifend egestas viverra. Donec finibus lectus \r\n            sed lorem ultricies, eget ornare leo luctus. Morbi vehicula, nulla eu tempor \r\n            interdum, nibh elit congue tellus, ac vulputate urna lorem nec nisi. Morbi id \r\n            consequat quam. Vivamus accumsan dui in facilisis aliquet.`,\r\n      `Etiam nec lectus urna. Sed sodales ultrices dapibus. \r\n            Nam blandit tristique risus, eget accumsan nisl interdum eu. Aenean ac accumsan \r\n            nisi. Nunc vel pulvinar diam. Nam eleifend egestas viverra. Donec finibus lectus \r\n            sed lorem ultricies, eget ornare leo luctus. Morbi vehicula, nulla eu tempor \r\n            interdum, nibh elit congue tellus, ac vulputate urna lorem nec nisi. Morbi id \r\n            consequat quam. Vivamus accumsan dui in facilisis aliquet.`,\r\n    ],\r\n  },\r\n];\r\n\r\nexport default articles;\r\n","import React from \"react\";\r\nimport { Link } from \"react-router-dom\";\r\n// now we are going to import articles from our component props\r\n// we do this because this allows us to use the same component to display different list of articles\r\n// our articles list page is our reusuable component so we just need to render this when we want to use it rather than writing different codes for each article\r\n\r\nconst ArticlesList = ({ articles }) => (\r\n  <>\r\n    {articles.map((article, key) => (\r\n      // if nothing is used for key especially in Map then do key={key}\r\n\r\n      <Link\r\n        className=\"article-list-item\"\r\n        key={key}\r\n        to={`/article/${article.name}`}\r\n      >\r\n        <h3>{article.title}</h3>\r\n        {/* we are going to use the first 150  characters not words on our article  */}\r\n        {/* // to get the first 150 characters we use substring from 0-150 */}\r\n        <p>{article.content[0].substring(0, 150)}...</p>\r\n      </Link>\r\n    ))}\r\n  </>\r\n);\r\n\r\nexport default ArticlesList;\r\n","import React from \"react\";\r\nimport articleContent from \"./article-content\";\r\nimport ArticlesList from \"../components/ArticleList\";\r\n// react doesnt allow a component return more than one element at the same level like this so we\r\n//have to put everything in an extra div or react Fragments but preferably a fragment\r\nconst ArticlesListPage = () => (\r\n  <>\r\n    <h1>Articles</h1>\r\n    <ArticlesList articles={articleContent} />\r\n  </>\r\n);\r\nexport default ArticlesListPage;\r\n","import React from 'react';\r\n\r\nconst UpvotesSection = ({ articleName, upvotes, setArticleInfo }) => {\r\n    const upvoteArticle = async () => {\r\n      const result =  await fetch(`/api/articles/${articleName}/upvote`, {\r\n            method: 'post',\r\n            // this post request and fetch updates the data in our database and retrieves back the updated data to our client side\r\n      });\r\n        const body = await result.json();\r\n        setArticleInfo(body); \r\n    }\r\n    return (\r\n        <div id='upvotes-section'> \r\n            <button onClick={upvoteArticle}>Add Upvotes</button>\r\n            <p>This post has been upvoted {upvotes} times </p> \r\n        </div>\r\n    );\r\n}\r\nexport default UpvotesSection;","import React from 'react';\r\n\r\nconst CommentsList = ({ comments }) => (\r\n    <>\r\n        <h3>Comments:</h3>\r\n        {comments.map((comment, key) => (\r\n            <div className='comment' key={key}>\r\n                <h4>{comment.username}</h4>\r\n                <p>{comment.text}</p>\r\n            </div>\r\n        ))}\r\n    </>\r\n);\r\nexport default CommentsList;","import React from \"react\";\r\n\r\nconst NotFoundPage = () => <h1>404: Page Not Found</h1>;\r\n\r\nexport default NotFoundPage;\r\n","import React, { useState } from 'react';\r\n\r\nconst AddCommentForm = ({ articleName, setArticleInfo }) => {\r\n    const [username, setUsername] = useState('');\r\n    const [commentText, setCommentText] = useState('');\r\n\r\n    const addComment = async () => {\r\n        const result = await fetch(`/api/articles/${articleName}/add-comment`, {\r\n            method: 'post',\r\n            body: JSON.stringify({ username, text: commentText }),\r\n            headers: {\r\n                'Content-Type': 'application/json',\r\n            }\r\n        });\r\n        const body = await result.json(); \r\n        setArticleInfo(body);\r\n        setUsername('');\r\n        setCommentText('');\r\n    }\r\n\r\n    return (\r\n        <div id=\"add-comment-form\">\r\n            <h3>Add a Comment</h3>\r\n            <label>\r\n                Name:\r\n                <input type=\"text\" value={username} onChange={(event) => setUsername(event.target.value)} />\r\n            </label>\r\n            <label>\r\n                Comment:\r\n                <textarea rows=\"4\" cols=\"50\" value={commentText} onChange={(event) => setCommentText(event.target.value)} />\r\n            </label>\r\n            <button onClick={() => addComment()}>Add Comment</button>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default AddCommentForm; \r\n\r\n\r\n// import { useState } from \"react\";\r\n// import React from 'react'; \r\n\r\n\r\n// // we will give our comment form an internal state to keep track of the values in these two text fields\r\n// //note very important! when doing more than just returning JSX use {} and add return keyword but if it is only jsx use  () may not need return keyword\r\n\r\n\r\n \r\n// const AddCommentForm = ({ articleName, setArticleInfo }) => {\r\n\r\n//     const [username, setUsername] = useState(''); \r\n\r\n//     const [commentText, setCommentText] = useState('');  \r\n\r\n//     const addComment = async () => {\r\n//         const result = await fetch(`/api/articles/${articleName}/add-comment`, {\r\n//             method: 'post',\r\n//             // Json.stringify turns the json object into a string that the server can parse \r\n//             body: JSON.stringify({ username, text: commentText }),\r\n//             //headers are neccesary when trying to parse json data correctly from the server \r\n//             headers: {\r\n//                 'Content-Type': 'application/json',\r\n//             }\r\n//         });\r\n//         const body = await result.json();\r\n//         setArticleInfo(body);  \r\n//         setUsername('');\r\n//         setCommentText('');  \r\n//      }\r\n    \r\n     \r\n\r\n//     return (\r\n//         <div id='add-comment-form'>\r\n//             <h3>Add a Comment</h3>\r\n//             <label>\r\n//                 {/* when the value of our name or comment text changes we want to update the Username state */}\r\n//                 Name:\r\n//                 <input type='text' value= {username} onChange={(event) => setUsername(event.target.value)} />\r\n//             </label>\r\n//             <label>\r\n//                 Comment:\r\n//                 <textarea rows=\"4\" cols=\"50\" value={commentText} onChange={(event) => setCommentText(event.target.value)} />\r\n//             </label>\r\n//             <button onClick={() => addComment}>Add Comment</button>\r\n\r\n//         </div> \r\n//     );\r\n// }\r\n\r\n// export default AddCommentForm; ","import React, { useState, useEffect } from \"react\";\r\nimport ArticlesList from \"../components/ArticleList\";\r\n// react doesnt allow a component return more than one element at the same level like this so we\r\n//have to put everything in an extra div or react Fragments but preferably a fragment\r\n// react router match matches the url params to the component\r\n\r\n\r\n//fetch is simply an asynchronous function that we can call from our frontend\r\n//the first argument of fetch is the url endpoint it will hit\r\n//second arg is optionally and it specifies details about the request we want to send\r\n//fetch default is a get request except we specify post method request\r\n\r\n\r\n\r\nimport UpvotesSection from \"../components/UpvotesSection\";\r\nimport CommentsList from \"../components/commentsList\";\r\nimport articleContent from \"./article-content\";\r\nimport NotFoundPage from \"./NotFoundPage\";\r\nimport AddCommentForm from \"../components/AddCommentForm\";\r\nconst ArticlePage = ({ match }) => {\r\n  //({match}) this is a good example of es6 props destructuring syntax\r\n  // here we pull our url name parameter out of match using match.params.name\r\n\r\n  const name = match.params.name;\r\n  // so now our article page now has access to the value url paramter  and make necessary changes to it accordingly\r\n  // now we create a function to find the article from our article array that has that name\r\n  // we also find the article whose name is equal to the name property that we get from the url parameters\r\n\r\n  const article = articleContent.find((article) => article.name === name);\r\n  \r\n  \r\n  const [articleInfo, setArticleInfo] = useState({upvotes: 0, comments: [] }); \r\n  \r\n  //we use useEffect to make request to the backend to load our article info\r\n  //useEffect helps us perform the side effects of our components like fetching data and setting the state with the result \r\n  \r\n  useEffect(() => {\r\n    const fetchData = async () => {\r\n        const result = await fetch(`/api/articles/${name}`) \r\n        const body = await result.json();   \r\n      setArticleInfo(body);\r\n    }\r\n      fetchData() \r\n  }, [ name ]); \r\n  // we set the dependency array so that useEffect is called when the url name params changes i.e when the article changes\r\n  if (!article) return <NotFoundPage />;\r\n  // here we define the filter function so we only choose only related articles and not the one we are currently on fro match.params.name\r\n  const otherArticles = articleContent.filter(\r\n    (article) => article.name !== name\r\n  );\r\n  return (\r\n    <>\r\n      {/* then we convert this article info into JSX */}\r\n      <h1>{article.title} </h1> \r\n      {/* we also map through article content which are paragraphs into JSX elements  */}\r\n      {/* always add a key to the arguments and as props in elements when using map  */}\r\n      \r\n      <UpvotesSection articleName={name} upvotes={articleInfo.upvotes} setArticleInfo={setArticleInfo} />\r\n      {article.content.map((paragraph, key) => (\r\n        <p key={key}>{paragraph}</p>\r\n      ))} \r\n      {/* for the article props we are going to display all the list of articles except the one we are currently on, \r\n      note props is passed before the first closing tag <props={}> */}\r\n      \r\n\r\n      <CommentsList comments={articleInfo.comments} />\r\n      <AddCommentForm articleName={ name } setArticleInfo={setArticleInfo} />\r\n      <h3>Related Articles</h3>\r\n      <ArticlesList articles={otherArticles} />  \r\n    </>\r\n  );\r\n};\r\nexport default ArticlePage;\r\n","// your Navbar.js uses the Link from react router dom and not achor a tags from normal traditional HTML\r\n\r\nimport React from \"react\";\r\nimport { Link } from \"react-router-dom\";\r\n\r\nconst NavBar = () => (\r\n  <nav>\r\n    <ul>\r\n      <li>\r\n        <Link to=\"/\">Home</Link>\r\n      </li>\r\n      <li>\r\n        <Link to=\"/about\">About</Link>\r\n      </li>\r\n      <li>\r\n        <Link to=\"/articles-list\">Articles</Link>\r\n      </li>\r\n    </ul>\r\n  </nav>\r\n);\r\n\r\nexport default NavBar;\r\n","import React, { Component } from \"react\";\nimport { BrowserRouter as Router, Route, Switch } from \"react-router-dom\";\nimport HomePage from \"./pages/Homepage\";\nimport AboutPage from \"./pages/AboutPage\";\nimport ArticlesListPage from \"./pages/ArticlesListPage\";\nimport ArticlePage from \"./pages/ArticlePage\";\nimport NavBar from \"./NavBar\";\nimport \"./App.css\";\nimport NotFoundPage from \"./pages/NotFoundPage\";\n\nclass App extends Component {\n  render() {\n    return (\n      <Router>\n        <div className=\"App\">\n          <NavBar />\n          {/* for a 404 page we dont give the route a path and it will always match by default */}\n          <div id=\"page-body\">\n            {/* Switch makes sure only one of the routes wrapped in it is rendered at a time\n            it will only render the first route that matches the url and none of the others so your 404 page must always be last since it will always match */}\n            <Switch>\n              <Route path=\"/\" component={HomePage} exact />\n              <Route path=\"/about\" component={AboutPage} />\n              <Route path=\"/articles-list\" component={ArticlesListPage} />\n              <Route path=\"/article/:name\" component={ArticlePage} />\n              <Route component={NotFoundPage} />\n            </Switch>\n          </div>\n        </div>\n      </Router>\n    );\n  }\n}\n\nexport default App;\n\n// // //Router Component ensures that Our entire App is kept upto date with the browsers current Url\n// //     //Route takes in two main props a path prop which specifies the url we want to render the component at and a Component prop which specifies the actual component we want to render\n// //     // if we want the route to render with just a / then path=\"/\" and pass exact to it matches to that specific page rather than all pages\n// //     //you can make any choice for the path=\"/any-name here\" but the component/Element prop must be the name of the component\n// //     return (\n// // we must use react router links rather than anchor a links to link inside a url or page inside our App\n\n// import React, { Component } from \"react\";\n// import { BrowserRouter as Router, Route } from \"react-router-dom\";\n// import HomePage from \"./pages/Homepage\";\n// import AboutPage from \"./pages/AboutPage\";\n// import ArticlesList from \"./pages/ArticlesListPage\";\n// import ArticlePage from \"./pages/ArticlePage\";\n// import NavBar from \"./NavBar\";\n// import \"./App.css\";\n// // url parameters like path=\"/:name \" is to give an extra name to the url that we can use to link to a specific article or post\n// class App extends Component {\n//   render() {\n//     return (\n//       <Router>\n//         <div className=\"App\">\n//           {/* {/ to allow navbar link component to have access to all our pages we} */}\n//           {/* wrap it all over the div element */}\n//           <NavBar />\n//           <div id=\"page-body\">\n//             <Route path=\"/\" component={HomePage} exact />\n//             <Route path=\"/about\" component={AboutPage} />\n//             <Route path=\"/articles-list\" component={ArticlesListPage} />\n//             <Route path=\"/article/:name\" component={ArticlePage} />\n//           </div>\n//         </div>\n//       </Router>\n//     );\n//   }\n// }\n\n// export default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}